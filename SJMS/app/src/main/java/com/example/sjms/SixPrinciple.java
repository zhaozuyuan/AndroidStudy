package com.example.sjms;

/**
 * create by zuyuan on 2019/5/16
 */
public interface SixPrinciple {
    /*
      单一职责原则：
        一个类只应该负责一件事情，例如：A类负责缓存、B类负责日志、C类负责网络请求...
        降低类的复杂度、提高可读性、修改代码时产生的影响最小。

      开闭原则：
        软件中的对象(类，模块，函数等)应该对于扩展是开放的，但是对于修改是关闭的。
        常见实现：使用抽象去构建框架，就可以通过扩展细节来实现修改、添加功能。

      里氏替换原则：
        所以引用基类的地方必须能够简单透明地使用其子类：子类去扩展父类的功能，但却不改变父类原有功能。
        例如：用于网络请求的地方不能让它本地缓存，这改变了父类原有的功能，那么在引用父类的地方便会产生错误的结果。

      依赖倒置原则：
        高层模块不应该依赖其底层模块，两者都应该依赖其抽象。
        抽象不应该依赖细节，细节应该依赖抽象。
        抽象：抽象类或者接口，多用接口表示其抽象。
        类与类之间依赖的都是对方的抽象——接口，依赖关系通过其接口实现，俗称面向接口编程，其代码具有很高的扩展性。

      接口隔离原则：
        客户端不应该依赖不需要的接口，即依赖的应该是它所需要最小的接口。
        例如：客户端只需要关闭流，那么只需要依赖AutoCloseable接口即可，不需要依赖一个流。
        （面向对象五大基本原则）

      迪米特原则：
        别名：最小知识原则
        类与类之间的关系越密切，即耦合越大，而软件编程的总原则：低耦合，高内聚。
        尽量减少类的依赖。
        例如：A依赖B，B依赖C，而A依赖C。如果做到A依赖B，B依赖C。少了A与C之间的依赖，就实现了降低耦合。
     */
}
